{"version":3,"sources":["constants.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","CounterButton","color","useState","count","setCount","console","log","onClick","Header","React","memo","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","length","connect","searchRobots","event","text","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0f886340.chunk.js","sourcesContent":["// contains constant variables\r\nexport const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\n/* Requesting the robots happens asynchronously:\r\n   Pending: first request sent\r\n   Success: request was successfull\r\n   Failed: request failed/was bad\r\n   Thus three constants created indicating what happens when one of the three actions happens\r\n*/\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// contains user actions\r\nimport { apiCall } from './api/api'\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants'\r\n\r\n// action for searchbox: receiving user input\r\n//  payload: property that holds the actual data in a Redux action object\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\n// first request (pending), then the request either was successfull or failed\r\n// dispatching actions to reducer\r\n// Also a HOF\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING }) // pending doesn't need a payload\r\n  apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","// fetches data from API\r\nexport const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa2 mb3 ba b--green bw2 bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = { hasError: false }\r\n  }\r\n\r\n  componentDidCatch (error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something went wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary","import React, {useState} from 'react';\r\n\r\nfunction CounterButton({color}) {\r\n    const [count,setCount] = useState(0)\r\n\r\n    const updateCount = () => {\r\n        setCount(count+1);\r\n    }\r\n\r\n    console.log({color,count});\r\n    return <button color={color} onClick={updateCount}>Count: {count}</button>\r\n}\r\n\r\n// NB! React.memo keeps a component from receiving state, so don't use it on components that needs state updates\r\nexport default (CounterButton);","import React from 'react';\r\nimport CounterButton from '../components/CounterButton';\r\n\r\nfunction Header() {\r\n    console.log('Hello');\r\n    return (\r\n        <div>\r\n            <h1 className=\"mb3 f1\">Robofriends</h1>\r\n            <CounterButton color={'red'}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(Header); // React.memo keeps a component from rerendering. Alternative for class componets is shouldComponentUpdate()","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'; // connects a React component to a Redux store\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending // pending, success, fail\r\n  }\r\n}\r\n\r\n// dispatch the DOM changes to call an action. Note mapStateToProps returns object, mapDispatchToProps returns function\r\n// the function returns an object then uses connect to change the data from reducers.\r\n// dispatches searches and requesting the robots\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  // no constructor needed, because there is no more direct state, state is returned as props\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots(); // props returned\r\n  }\r\n\r\n    render() {\r\n      const { searchField, onSearchChange, robots, isPending } = this.props; // state receives props\r\n      const filterRobots = robots.filter(robot => {\r\n          return robot.name.toLowerCase().includes(searchField.toLowerCase()); // check if search value exists in robots array. Works for upper and lowercase searches\r\n      });\r\n      return (\r\n        <div className='tc'>\r\n        <Header/>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          { isPending ? <h1>Loading</h1> :\r\n            !filterRobots.length? <h1>ROBOT DOESN'T EXIST...</h1>:\r\n              <ErrorBoundary>\r\n                <CardList robots={filterRobots} />\r\n              </ErrorBoundary>\r\n          }\r\n        </Scroll>\r\n        </div>\r\n      )}\r\n}\r\n\r\n// action done from mapDispatchToProps will channge state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n// connect is a HOF","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// contains reducers that returns output\r\n// consists of pure functions\r\nimport {\r\n  CHANGE_SEARCHFIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from './constants';\r\n\r\n // initial state for searchbox\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\n// reducer function: searching for robots\r\n// default parameters provided to function\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCHFIELD:\r\n      //  Object.assign: copies all enumerable own properties from one or more source objects to a target object\r\n      //  Retuns the target object, in this case the action type and value\r\n      return Object.assign({}, state, {searchField: action.payload})\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  robots: [],\r\n  isPending: true\r\n}\r\n\r\n// requesting robots reducer\r\n// default parameters passed to function\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {error: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux'; // makes the Redux store available to any nested components that need to access the Redux store\r\nimport thunkMiddleware from 'redux-thunk'; // allows simple asynchronous use of dispatch\r\nimport { createLogger } from 'redux-logger';\r\nimport 'tachyons';\r\n\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { requestRobots, searchRobots } from './reducers' // reducer functions\r\nimport './index.css';\r\n\r\nconst logger = createLogger() \r\n\r\n// rootReducers - combine all reducers into a single reducer\r\nconst rootReducers = combineReducers({requestRobots, searchRobots})\r\n\r\n// createStore(reducer,middleware)\r\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}> {/* store is passed down as a prop*/}\r\n    <App/>\r\n  </Provider>,\r\n  //  everything App renders will be put into the div with id root\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();"],"sourceRoot":""}